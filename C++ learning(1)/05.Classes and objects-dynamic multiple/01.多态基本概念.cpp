#include<iostream>
using namespace std;

class Animal
{
public:
	//Speak函数就是虚函数
	//函数面前加上virtual关键字，变成虚函数，那么编译器在编译的时候就不能确定函数调用了
	virtual void speak()
	{
		cout << "动物在说话" << endl;
	}
};

//猫类
class Cat :public Animal
{
public:
	//重写  函数返回值的类型  函数名  参数列表  完全相同
	void speak()
	{
		cout << "猫在说话" << endl;
	}
};

class Dog :public Animal
{
public:
	//狗类
	void speak()
	{
		cout << "狗在说话" << endl;
	}
};

//执行说话的函数
//地址早绑定，在编译器阶段确定函数地址
//如果想执行让猫说话，那么这个函数地址就不能提前绑定，需要在运行阶段进行绑定，地址晚绑定

//动态多态满足条件
//1、有继承关系
//2、子类要重写父类的虚函数

//动态多态使用
// 父类的指针或者引用 执行于类对象

void doSpeak(Animal& animal) // Animal & animal = cat;
{
	animal.speak();
}

void test01()
{
	Cat cat;

	doSpeak(cat);

	Dog dog;

	doSpeak(dog);
}

int main() {

	test01();

	system("pause");

	return 0;
}